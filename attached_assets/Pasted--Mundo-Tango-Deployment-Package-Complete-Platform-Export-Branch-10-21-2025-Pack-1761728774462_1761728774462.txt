# Mundo Tango - Deployment Package
## Complete Platform Export - Branch: 10-21-2025

---

## 📦 Package Contents

This export includes the **complete Mundo Tango platform** with all code, configurations, and documentation.

### What's Included:
- ✅ Full-stack TypeScript application (React + Express + Vite)
- ✅ Database schema (PostgreSQL + Drizzle ORM)
- ✅ All frontend components and pages
- ✅ Backend API routes and services
- ✅ AI integration (Claude, GPT-4o, Gemini)
- ✅ Authentication system (Replit OAuth + JWT)
- ✅ Real-time features (Socket.io)
- ✅ Visual Editor + Mr Blue AI
- ✅ Configuration files
- ✅ Documentation

---

## 🚀 Quick Start Guide

### Prerequisites
- Node.js 18+ (LTS recommended)
- PostgreSQL 14+
- npm or yarn package manager
- Git

### Step 1: Clone/Extract the Repository
```bash
# If using git clone
git clone <your-repository-url>
cd Mundo_Tango_App_emergent

# OR if using zip export
unzip mundo-tango-export.zip
cd Mundo_Tango_App_emergent
```

### Step 2: Install Dependencies
```bash
npm install
```

### Step 3: Environment Setup
Create a `.env` file in the root directory:

```env
# Database
DATABASE_URL=postgresql://user:password@localhost:5432/mundo_tango
# Authentication
JWT_SECRET=your-super-secret-jwt-key-here
REPLIT_COOKIE_SECRET=your-cookie-secret-here
# AI Services (Optional - required for Mr Blue AI)
ANTHROPIC_API_KEY=sk-ant-xxxxx
OPENAI_API_KEY=sk-xxxxx
GOOGLE_GENAI_API_KEY=xxxxx
# Environment
NODE_ENV=development
PORT=5000
# Replit OAuth (Optional - for Replit auth)
REPL_ID=your-repl-id
REPLIT_DOMAINS=your-domain.replit.dev
```

### Step 4: Database Setup
```bash
# Push schema to database (creates all tables)
npm run db:push

# Or with force if there are conflicts
npm run db:push -- --force
```

### Step 5: Start Development Server
```bash
npm run dev
```

The app will be available at: `http://localhost:5000`

---

## 📁 Project Structure

```
Mundo_Tango_App_emergent/
├── client/                   # Frontend React application
│   ├── src/
│   │   ├── components/      # React components
│   │   │   ├── mrBlue/     # Mr Blue AI interface
│   │   │   ├── visual-editor/ # Visual Editor
│   │   │   └── ...
│   │   ├── pages/          # Application pages
│   │   ├── hooks/          # Custom React hooks
│   │   ├── lib/            # Utilities and helpers
│   │   └── App.tsx         # Main app component
│   └── index.html
│
├── server/                   # Backend Express application
│   ├── routes/              # API routes
│   │   ├── mrBlueUnifiedRoutes.ts
│   │   ├── mrBlueAutonomous/
│   │   └── ...
│   ├── services/            # Business logic
│   │   ├── gemini/         # Gemini AI integration
│   │   └── ...
│   ├── middleware/          # Express middleware
│   ├── db/                  # Database setup
│   └── index-novite.ts      # Server entry point
│
├── shared/                   # Shared code (frontend + backend)
│   └── schema.ts            # Database schema (Drizzle)
│
├── docs/                     # Documentation
│   ├── MB_MD_QA_PROTOCOL.md
│   ├── INTEGRATION_PROTOCOL.md
│   └── ...
│
├── attached_assets/          # Static assets
├── package.json             # Dependencies
├── vite.config.ts           # Vite configuration
├── drizzle.config.ts        # Database configuration
└── replit.md                # Project documentation
```

---

## 🔧 Key Technologies

### Frontend
- **React 18** - UI framework
- **TypeScript** - Type safety
- **Vite** - Build tool
- **Tailwind CSS** - Styling
- **shadcn/ui** - Component library
- **TanStack Query** - Data fetching
- **Socket.io Client** - Real-time updates
- **Wouter** - Routing

### Backend
- **Node.js + Express** - Server framework
- **TypeScript** - Type safety
- **PostgreSQL** - Database
- **Drizzle ORM** - Database toolkit
- **Socket.io** - WebSocket server
- **JWT** - Authentication
- **Multer** - File uploads

### AI Integration
- **Anthropic Claude 3.5 Sonnet** - Advanced reasoning
- **OpenAI GPT-4o** - Chat and voice
- **Google Gemini 2.5 Pro/Flash** - Cost-optimized AI

---

## 🗄️ Database Schema

The database schema is defined in `shared/schema.ts` using Drizzle ORM.

**Main Tables:**
- `users` - User accounts
- `conversations` - Chat conversations
- `messages` - Chat messages
- `mr_blue_sessions` - AI coding sessions
- `code_changes` - Pending code changes
- `events` - Tango events
- `memories` - User posts/memories
- `groups` - Community groups
- `feature_flags` - Feature toggles

**Migration Command:**
```bash
npm run db:push
```

---

## 🎯 Key Features

### 1. Mr Blue AI Assistant
**Location:** `client/src/components/mrBlue/`

Multi-model AI assistant with:
- Chat interface (Claude, GPT-4o, Gemini)
- Voice conversations (GPT-4o Realtime API)
- Autonomous coding (vibe coding)
- Visual Editor integration
- Cost-optimized routing (87% cost reduction)

### 2. Visual Editor
**Location:** `client/src/components/visual-editor/`

Figma-like interface with:
- Click-to-select elements
- Inspector panel
- AI-powered editing
- Git integration
- Real-time preview

### 3. Social Features
- Memories/Posts system
- Events management
- User profiles
- Groups/Communities

### 4. Authentication
**Location:** `server/replitAuth.ts`

- Replit OAuth integration
- JWT-based sessions
- Role-based access control (RBAC)
- Super admin features

---

## 📡 API Endpoints

### Authentication
- `POST /auth/login` - User login
- `GET /auth/user` - Get current user
- `POST /auth/logout` - User logout

### Mr Blue AI
- `POST /api/mrblue/unified` - Unified AI endpoint (SSE streaming)
- `POST /api/mrblue/stream` - Chat streaming
- `GET /api/mrblue/conversations` - List conversations
- `POST /api/mrblue/conversations` - Create conversation

### Visual Editor
- `POST /api/mrblue/autonomous/write-file` - Write file
- `POST /api/mrblue/autonomous/read-file` - Read file
- `GET /api/mrblue/sessions/:id` - Get coding session

### Social
- `GET /api/memories` - Get memories/posts
- `POST /api/memories` - Create memory
- `GET /api/events` - Get events
- `GET /api/groups` - Get groups

---

## 🔐 Security Considerations

1. **Environment Variables**
   - Never commit `.env` file to git
   - Use strong secrets for JWT_SECRET
   - Rotate API keys regularly

2. **Database**
   - Use connection pooling in production
   - Enable SSL for database connections
   - Regular backups recommended

3. **API Keys**
   - Store in environment variables
   - Use Replit Secrets or similar in production
   - Monitor usage and costs

4. **Authentication**
   - JWT tokens expire after 24 hours
   - Secure cookies with httpOnly flag
   - CSRF protection enabled

---

## 🚢 Production Deployment

### Option 1: Replit Deployments
```bash
# Already configured for Replit
# Just click "Deploy" in Replit dashboard
```

### Option 2: Docker
```bash
# Build Docker image
docker build -t mundo-tango .

# Run container
docker run -p 5000:5000 --env-file .env mundo-tango
```

### Option 3: Traditional Hosting (VPS/Cloud)
```bash
# Build frontend
npm run build

# Start production server
NODE_ENV=production npm start
```

**Production Checklist:**
- ✅ Set `NODE_ENV=production`
- ✅ Use production database
- ✅ Enable HTTPS
- ✅ Configure CORS properly
- ✅ Set up error monitoring (Sentry)
- ✅ Configure CDN for static assets
- ✅ Set up database backups
- ✅ Monitor AI API costs

---

## 🐛 Troubleshooting

### Port Already in Use
```bash
# Kill process on port 5000
lsof -ti:5000 | xargs kill -9
```

### Database Connection Issues
```bash
# Check PostgreSQL is running
psql -U postgres -c "SELECT version();"

# Verify DATABASE_URL in .env
echo $DATABASE_URL
```

### Build Errors
```bash
# Clear node_modules and reinstall
rm -rf node_modules package-lock.json
npm install

# Clear Vite cache
rm -rf node_modules/.vite
```

### TypeScript Errors
```bash
# Regenerate types
npm run db:generate
```

---

## 📊 Current State (as of Oct 28, 2025)

### ✅ What's Working
- Chat interface with multiple AI models
- Message persistence to database
- Real-time WebSocket connections
- Visual Editor UI
- Authentication system
- Database schema
- API routing

### 🚧 In Progress (Phase 1)
- Vibe coding execution (code changes)
- Plan/Build mode clarifications
- Voice WebSocket integration
- Self-awareness system integration

### 📝 Known Issues
1. Voice mode WebSocket not connecting (needs investigation)
2. Vibe coding SSE event parsing not wired up
3. Self-awareness system not integrated into unified endpoint

---

## 📚 Documentation

**Essential Reading:**
- `replit.md` - Project overview and preferences
- `docs/MB_MD_QA_PROTOCOL.md` - Development methodology
- `docs/INTEGRATION_PROTOCOL.md` - Component integration guide
- `docs/AGENT_LEARNINGS.md` - AI agent training

**Architecture Docs:**
- Git workflow documented in Visual Editor
- Multi-model AI routing in `server/services/gemini/`
- Feature flags system in `server/routes/featureFlagsRoutes.ts`

---

## 💡 Tips for New Platform

1. **Database Setup**
   - Import schema first: `npm run db:push`
   - Seed admin user manually via SQL or create signup flow

2. **AI API Keys**
   - Start with one provider (Anthropic or OpenAI)
   - Add others later as needed
   - Monitor costs closely

3. **Development Workflow**
   - Use `npm run dev` for hot reload
   - Frontend: Vite dev server (instant HMR)
   - Backend: Express server with nodemon

4. **Deployment**
   - Test in staging environment first
   - Use environment variables for secrets
   - Monitor error logs (Sentry integration available)

---

## 🆘 Support

**Original Platform:** Replit
**Branch:** 10-21-2025
**Last Updated:** October 28, 2025

**Contact Information:**
- For technical questions, refer to `replit.md`
- Check `docs/` directory for detailed documentation
- Review code comments for implementation details

---

## 📄 License

This is a proprietary application for the Mundo Tango tango community platform.

---

**Note:** This package represents the complete state of the application as of the latest commit on branch `10-21-2025`. All AI features, authentication, and database schemas are included and ready for deployment on any Node.js-compatible platform.
 208 changes: 208 additions & 0 deletions208  
EXPORT_INSTRUCTIONS.txt
Original file line number	Diff line number	Diff line change
@@ -0,0 +1,208 @@
═══════════════════════════════════════════════════════════════
  MUNDO TANGO - COMPLETE EXPORT INSTRUCTIONS
  Branch: 10-21-2025 | Date: October 28, 2025
═══════════════════════════════════════════════════════════════

📦 HOW TO EXPORT THIS PROJECT TO ANOTHER PLATFORM
═══════════════════════════════════════════════════════════════

OPTION 1: REPLIT DOWNLOAD (EASIEST) ✅
────────────────────────────────────────────────────────────────
1. Click the "⋮" (three dots) menu in Replit sidebar
2. Select "Download as zip"
3. Save the file: mundo-tango-export.zip
4. Extract on your target platform
5. Follow DEPLOYMENT_GUIDE.md inside


OPTION 2: GIT CLONE (RECOMMENDED FOR DEVELOPERS) ✅
────────────────────────────────────────────────────────────────
If you have git access to this repository:

1. From another machine/platform:
   git clone <your-repository-url>
   cd Mundo_Tango_App_emergent
   git checkout 10-21-2025

2. Install and run:
   npm install
   # Create .env file (see DEPLOYMENT_GUIDE.md)
   npm run db:push
   npm run dev


OPTION 3: GIT BUNDLE (FOR OFFLINE TRANSFER) ✅
────────────────────────────────────────────────────────────────
From Replit Shell:

1. Create bundle:
   git bundle create mundo-tango.bundle --all

2. Download the .bundle file from Replit

3. On target platform:
   git clone mundo-tango.bundle mundo-tango
   cd mundo-tango
   npm install


═══════════════════════════════════════════════════════════════
📋 WHAT'S INCLUDED IN THIS EXPORT
═══════════════════════════════════════════════════════════════

✅ Frontend Code (client/)
   - React 18 + TypeScript application
   - 200+ component files
   - Mr Blue AI interface
   - Visual Editor
   - All pages and UI components

✅ Backend Code (server/)
   - Express + TypeScript server
   - 100+ route and service files
   - AI integrations (Claude, GPT-4o, Gemini)
   - Authentication system
   - WebSocket server

✅ Database Schema (shared/schema.ts)
   - PostgreSQL + Drizzle ORM
   - All table definitions
   - Migration scripts

✅ Configuration Files
   - package.json (dependencies)
   - vite.config.ts (build config)
   - drizzle.config.ts (database)
   - tsconfig.json (TypeScript)

✅ Documentation (docs/)
   - Development guides
   - API documentation
   - Architecture docs
   - DEPLOYMENT_GUIDE.md ⭐ START HERE


═══════════════════════════════════════════════════════════════
⚙️  SETUP ON NEW PLATFORM (QUICK START)
═══════════════════════════════════════════════════════════════

1. EXTRACT/CLONE PROJECT
   └─ Use one of the export methods above

2. INSTALL DEPENDENCIES
   npm install

3. CREATE .ENV FILE
   Copy this template:
   ─────────────────────────────────────────────────────
   DATABASE_URL=postgresql://user:pass@localhost:5432/db
   JWT_SECRET=your-random-secret-here
   NODE_ENV=development
   PORT=5000

   # Optional AI features
   ANTHROPIC_API_KEY=sk-ant-xxxxx
   OPENAI_API_KEY=sk-xxxxx
   GOOGLE_GENAI_API_KEY=xxxxx
   ─────────────────────────────────────────────────────

4. SETUP DATABASE
   npm run db:push

5. START SERVER
   npm run dev

6. OPEN BROWSER
   http://localhost:5000


═══════════════════════════════════════════════════════════════
🚀 DEPLOYMENT TARGETS
═══════════════════════════════════════════════════════════════

✅ Vercel (Frontend + Serverless)
✅ Railway (Full-stack)
✅ Render (Full-stack)
✅ Heroku (Full-stack)
✅ AWS/GCP/Azure (VPS/Container)
✅ DigitalOcean (VPS)
✅ Any Node.js 18+ hosting


═══════════════════════════════════════════════════════════════
📊 PROJECT STATS
═══════════════════════════════════════════════════════════════

Language:        TypeScript + React
Total Files:     ~500-800 source files
Dependencies:    ~150 npm packages
Database:        PostgreSQL 14+
Node Version:    18+ (LTS recommended)
Package Manager: npm or yarn

Frontend:        Vite + React 18 + Tailwind CSS
Backend:         Express + Socket.io
ORM:             Drizzle
Auth:            JWT + Replit OAuth (replaceable)
AI:              Claude 3.5 + GPT-4o + Gemini 2.5


═══════════════════════════════════════════════════════════════
⚠️  IMPORTANT NOTES
═══════════════════════════════════════════════════════════════

❌ DO NOT COPY node_modules/
   → Reinstall with: npm install

❌ DO NOT COPY .env file
   → Create fresh on new platform

❌ DO NOT COPY dist/ or .cache/
   → Will be regenerated automatically

✅ DO copy all source code files (.ts, .tsx, .js, .jsx)
✅ DO copy all config files (package.json, vite.config.ts, etc.)
✅ DO copy documentation (docs/, *.md files)
✅ DO read DEPLOYMENT_GUIDE.md first!


═══════════════════════════════════════════════════════════════
🆘 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════

Problem: Port 5000 already in use
Solution: Kill the process or change PORT in .env

Problem: Database connection error
Solution: Verify DATABASE_URL and PostgreSQL is running

Problem: TypeScript errors
Solution: npm install && npm run db:generate

Problem: Build fails
Solution: rm -rf node_modules && npm install

📖 Full troubleshooting guide: See DEPLOYMENT_GUIDE.md


═══════════════════════════════════════════════════════════════
📞 NEXT STEPS
═══════════════════════════════════════════════════════════════

1. ⭐ READ: DEPLOYMENT_GUIDE.md (comprehensive setup guide)
2. 📋 REVIEW: EXPORT_MANIFEST.md (complete file list)
3. 📦 EXPORT: Use one of the 3 methods above
4. 🚀 DEPLOY: Follow platform-specific instructions
5. ✅ TEST: Verify all features work


═══════════════════════════════════════════════════════════════
Current Branch: 10-21-2025
Export Date: October 28, 2025
Platform: Originally built on Replit
Ready for: Any Node.js 18+ compatible platform
═══════════════════════════════════════════════════════════════

🎉 Your complete Mundo Tango platform is ready to transfer!

Start with DEPLOYMENT_GUIDE.md for detailed instructions.
 281 changes: 281 additions & 0 deletions281  
EXPORT_MANIFEST.md
Original file line number	Diff line number	Diff line change
@@ -0,0 +1,281 @@
# Export Manifest - Mundo Tango Platform
## Complete File List for Transfer

---

## 🎯 How to Export This Project

### Method 1: Git Clone (Recommended)
```bash
# If you have access to the repository
git clone <repository-url>
cd Mundo_Tango_App_emergent
git checkout 10-21-2025
```

### Method 2: Replit Download
1. Click "⋮" (three dots) in Replit sidebar
2. Select "Download as zip"
3. Extract on your target platform

### Method 3: Manual Git Bundle
```bash
# From Replit shell
git bundle create mundo-tango.bundle --all
# Download the .bundle file and clone it elsewhere:
# git clone mundo-tango.bundle
```

---

## 📦 Critical Files to Include

### ✅ Root Configuration Files
```
package.json              # Dependencies (CRITICAL)
package-lock.json         # Locked versions
tsconfig.json            # TypeScript config
vite.config.ts           # Vite build config
drizzle.config.ts        # Database config
.replit                  # Replit config (optional for other platforms)
replit.nix              # Nix config (optional)
replit.md               # Project documentation (IMPORTANT)
DEPLOYMENT_GUIDE.md     # This deployment guide
EXPORT_MANIFEST.md      # This file
```

### ✅ Frontend Code (`client/`)
```
client/
├── index.html                    # Entry HTML
├── src/
│   ├── main.tsx                 # React entry point
│   ├── App.tsx                  # Main app component
│   ├── index.css                # Global styles
│   │
│   ├── components/              # ALL React components
│   │   ├── mrBlue/             # Mr Blue AI (100+ files)
│   │   ├── visual-editor/      # Visual Editor (50+ files)
│   │   ├── layout/
│   │   ├── navigation/
│   │   ├── ui/                 # shadcn components
│   │   └── ...
│   │
│   ├── pages/                   # All pages
│   │   ├── Dashboard.tsx
│   │   ├── Events.tsx
│   │   ├── Memories.tsx
│   │   └── ...
│   │
│   ├── hooks/                   # Custom React hooks
│   ├── lib/                     # Utilities
│   ├── services/                # API clients
│   ├── utils/                   # Helper functions
│   └── i18n/                    # Internationalization
│
└── public/                      # Static assets (if any)
```

### ✅ Backend Code (`server/`)
```
server/
├── index-novite.ts              # Server entry point (CRITICAL)
├── vite.ts                      # Vite integration
│
├── routes/                      # ALL API routes
│   ├── mrBlueUnifiedRoutes.ts  # Mr Blue unified endpoint
│   ├── mrBlueAutonomous/       # Autonomous coding routes
│   ├── featureFlagsRoutes.ts
│   ├── conversationRoutes.ts
│   └── ... (30+ route files)
│
├── services/                    # Business logic
│   ├── gemini/                 # Gemini AI integration
│   │   ├── VibeCodeEngine.ts
│   │   └── ...
│   ├── aiService.ts
│   ├── selfAwarenessSystem.ts
│   └── ...
│
├── middleware/                  # Express middleware
│   ├── isAuthenticated.ts
│   └── ...
│
├── db/                          # Database setup
│   └── index.ts
│
├── utils/                       # Server utilities
│   ├── authHelper.ts
│   └── ...
│
└── replitAuth.ts               # Authentication (CRITICAL)
```

### ✅ Shared Code (`shared/`)
```
shared/
└── schema.ts                    # Database schema (CRITICAL)
```

### ✅ Documentation (`docs/`)
```
docs/
├── MB_MD_QA_PROTOCOL.md         # Development methodology
├── INTEGRATION_PROTOCOL.md      # Integration guide
├── AGENT_LEARNINGS.md           # AI agent training
├── DOCUMENTATION_VERIFICATION.md
├── UPGRADED_UI_TESTING_PROTOCOL.md
└── agents/                      # Agent documentation
```

### ✅ Database Migrations (if any)
```
drizzle/                         # Generated migrations (optional)
```

### ✅ Assets
```
attached_assets/                 # Static files (images, etc.)
```

---

## ❌ Files to EXCLUDE (DO NOT transfer)

```
node_modules/                    # Reinstall with npm install
.git/                           # Optional (use git clone instead)
.env                            # Create fresh on new platform
dist/                           # Build output (regenerate)
.replit.db/                     # Replit-specific
.cache/                         # Cache files
.vite/                          # Vite cache
*.log                           # Log files
.DS_Store                       # Mac files
```

---

## 🔑 Environment Variables Required

Create `.env` file on target platform with these variables:

```env
# === REQUIRED FOR BASIC OPERATION ===
DATABASE_URL=postgresql://...
JWT_SECRET=generate-random-string-here
NODE_ENV=development
PORT=5000
# === REQUIRED FOR REPLIT AUTH (optional on other platforms) ===
REPLIT_COOKIE_SECRET=generate-random-string
REPL_ID=your-repl-id
REPLIT_DOMAINS=your-domain
# === OPTIONAL AI SERVICES ===
ANTHROPIC_API_KEY=sk-ant-...
OPENAI_API_KEY=sk-...
GOOGLE_GENAI_API_KEY=...
# === OPTIONAL MONITORING ===
SENTRY_DSN=...
VITE_POSTHOG_API_KEY=...
```

---

## 📊 File Count Summary

**Estimated Total Files:** ~500-800 files

Breakdown:
- **Frontend Components:** ~200 files
- **Backend Routes/Services:** ~100 files
- **Node Modules:** ~20,000 files (DO NOT copy - reinstall)
- **Documentation:** ~30 files
- **Configuration:** ~15 files

---

## 🚚 Transfer Checklist

### Before Export:
- ✅ Commit all changes: `git add . && git commit -m "Final export"`
- ✅ Document current branch: `10-21-2025`
- ✅ List all environment variables needed
- ✅ Note database schema version
- ✅ Export database data (if needed)

### After Transfer to New Platform:
- ✅ Extract/clone repository
- ✅ Run `npm install`
- ✅ Create `.env` file with secrets
- ✅ Set up PostgreSQL database
- ✅ Run `npm run db:push` to create tables
- ✅ Run `npm run dev` to test
- ✅ Verify all features work
- ✅ Deploy to production

---

## 🎯 Platform-Specific Notes

### Deploying to Vercel/Netlify
- Frontend-only deployment won't work (this is full-stack)
- Consider splitting into frontend (Vercel) + backend (Railway/Render)
- Use serverless functions for API routes

### Deploying to Railway/Render
- Perfect for full-stack Node.js apps
- Configure `npm run dev` as start command
- Set all environment variables in dashboard
- Connect PostgreSQL database

### Deploying to AWS/GCP/Azure
- Use EC2/Compute Engine/App Service
- Install Node.js 18+
- Set up PostgreSQL (RDS/Cloud SQL/Azure Database)
- Configure reverse proxy (nginx)

### Deploying to Heroku
- Add `Procfile`: `web: npm start`
- Use Heroku Postgres add-on
- Set environment variables: `heroku config:set KEY=value`

---

## 💾 Database Export (Optional)

If you need to transfer existing data:

```bash
# Export schema + data
pg_dump $DATABASE_URL > mundo_tango_backup.sql

# On new platform, restore:
psql $NEW_DATABASE_URL < mundo_tango_backup.sql
```

---

## 🔗 Repository Information

**Branch:** 10-21-2025  
**Last Commit:** "Update documentation to include recent changes"  
**Platform:** Originally built on Replit  
**Tech Stack:** React + Express + PostgreSQL + TypeScript  

---

## 📞 Next Steps After Transfer

1. **Test locally first** - Make sure everything runs on your machine
2. **Set up staging environment** - Test deployment before production
3. **Configure monitoring** - Set up error tracking and logs
4. **Update authentication** - May need to replace Replit OAuth
5. **Test AI features** - Verify API keys work on new platform
6. **Performance testing** - Check database queries and API response times

---

**Important:** This manifest ensures you have everything needed to run Mundo Tango on any Node.js-compatible platform. Follow the DEPLOYMENT_GUIDE.md for detailed setup instructions.